Watching videos by Pankaj Academy.

Focus on Oops concept
Inheritance
Encapsulation
Polymorphism
Abstraction

Spring documentation
https://docs.spring.io/spring-framework/docs/current/reference/html/
https://data-flair.training/blogs/spring-tutorials-home/
https://www.digitalocean.com/community/tutorials/spring-tutorial-spring-core-tutorial


Roadmap 
https://whimsical.com/spring-framework-TVWwqkSZnFtBpnS629WueK
Spring framework 
 -  Pre requisite 
      - Java (1.8)
	  - Maven  
 - Modules
     - Spring core(Spring framework, Dependency Injection, Spring Dependency Injection, Spring Ioc Containers and Spring bean, Spring bean scope, Bean autowiring,Bean life cycle)
	       https://www.digitalocean.com/community/tutorials/spring-tutorial-spring-core-tutorial
     - Spring jdbc DAO
	 - Spring Aop
	 - Transaction - DBMS 
	 - ORM (object relation mapping)
	 - web and coring MVC.
	 - Security
	 - Boot
	 - Data JPA (java persistence API now called jakartha persistence)
  - Microservice
    - Basic
	- Eureka service discovery
	- spring cloud API gateway
	- Load balancing
	- Microservice communication.
	- Circuit breaker.
	- cloud config.




Sept 15 - Jan 10 2024 16/12/20 Session 3
Spring boot


download
https://spring.io/tools

- It will download jar file 

Most companies using
- Spring Boot web services
- Hibernate web services
- Micro services

Extract the jar file - C:\STS
again extract one more time - Contents.zip  - C:\STS\sts-4.15.3.RELEASE

Spring Starter Project we can't see in eclipse 
  Type : Maven
  Java Version : 8 and other keep by default 
  
Sept 16

dowload required dependency from https://mvnrepository.com/ 

MySQL Connector/J

<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.27</version>
</dependency>

For pdf file generator 
<!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf -->
<dependency>
    <groupId>com.itextpdf</groupId>
    <artifactId>itextpdf</artifactId>
    <version>5.5.13.1</version>
</dependency>

Maven helps me to dowload project dependency.

Spring intialiser
https://start.spring.io/
- Using spring initializer we will create spring project in eclipse(with maven dependecies).

Group and Package name to be same 

C:\eclipse_with_STS\demo

Unit testing

Framework
Junit
TestNg


import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class A {

	//by default eclipse provide Junit and we need to import library
	@Test  
	public void test1() {
		System.out.println("from test1");
	}
		
	//Annotation basically instructs the compiler to run this test weather it pass or fail
		@Test
		public void test2() {
			System.out.println("from test2");

	}
//		@Test
//		public void test3() {
//			int x=10/0;
//			System.out.println(x);

//	}
		// It runs before every test
		@Before
		public void beforeTest()
		{
			System.out.println("From beforeTest");
		}
		
		// It runs after every test
		@After
		public void afterTest()
		{
			System.out.println("afterTest");
		}
		
		//It run before all the method once and should have static method
	@BeforeClass
		public static void beforeClass()
		{
			System.out.println("Before Class");
		}
	
	@AfterClass
	public static void afterClass()
	{
		System.out.println("After Class");
	}

    @Test
	public  void test3()
	{
		System.out.println("test3");
	}
}
o/p:
Before Class
From beforeTest
from test1
afterTest
From beforeTest
from test2
afterTest
From beforeTest
test3
afterTest
After Class

@Test 
 - to execute test cases - by default eclipse has junit.

@Before
  - It will execute before all test cases.
 
@After
   - It will execute after all test cases.
   
@BeforeClass 
   - It will execute before all test case only once Note: method should be static.

@AfterClass
  - - It will execute after all test case only once Note: method should be static.

testNg does not comes with eclipse by default
how to configure 
https://testng.org/doc/ 
https://testng.org/doc/eclipse.html#eclipse-installation
https://testng.org/testng-eclipse-update-site. (https://testng.org/testng-eclipse-update-site/7.4.0)  paste this URL(Eclipse plug-in) in help - Install new software 

Eclipse - Help - Install new software - paste the URL.

sept 17
TestNG 

package com.testng;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterTest;
im
port org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class A {
	
	@Test
	public void test1()
	{
		System.out.println("print test1 result");
	}
	
	@BeforeTest
	public void beforeTest()
	{
		System.out.println("From beforeTest");
	}
	
	@BeforeClass
	public  void beforeClass()
	{
		System.out.println("Before Class");
	}
    
	@AfterTest
	public void afterTest()
	{
		System.out.println("afterTest");
	}
	
	@AfterClass  //static method not required for class annotation but in junit requied
	public  void afterClass()
	{
		System.out.println("After Class");
	}
   
	@Test
	public void test2()
	{
		System.out.println("print test2 result");
	}
}

o/p:
From beforeTest
Before Class
print test1 result
print test2 result
After Class
afterTest


Before Class
From beforeTest
from test1
afterTest
From beforeTest
from test2
afterTest
From beforeTest
test3
afterTest
After Class

Nov 1
Junit mostly used in springboot
for selenium testers testng good.

@Test -  To run the test cases.
@BeforeTest - It runs before testcase only once at beginning.
@AfterTest - It runs after testcase only once at end.
@BeforeClass - It will run before the test case only once and after the @BeforeTest.
@AfterClass - It will run after the test case only once and before the @AfterTest.

Advantages of testng 
  - It will create test-output folder and in index.html with chrome we can see every test cases.
  - We can generate .xml with select project - right click testng - convert to testng it will generate the xml file, we can run multiple test's using xml.
  - We can exclude particular test cases from class using exclude tag in .xml.
  - @DataProvider - most important annotation It will supply data present in this method to other method   @Test(dataprovider = "methodname")
  
  
How to compare result with expected values using Assert.assertEquals("current_value", "expecte_value");
AddTwoNumbers.java
package com.testng.compare;

public class AddTwoNumbers {
	
	public int addTwoNumbers(int num1, int num2)
	{
		return num1+num2;
	}

}

A.java
package com.testng.compare;

import org.testng.Assert;
import org.testng.annotations.Test;

public class A {
	
	@Test
	public void test1()
	{
		//To call method of other class we need to create object of that class first.
		AddTwoNumbers obj = new AddTwoNumbers();
		int result = obj.addTwoNumbers(10,20);
	// It will compare the result i.e actual value and 30 is expected value
	//	Assert.assertEquals(result, 30);
		
		Assert.assertEquals(result, 20);
		
	}

}

o/p:
FAILED: test1

Nov 3  - Jan 20 2024 Session  3 

Spring project
open STS - spring starter project - fill the details - 
 
 choose below options dependecies
 Mysql Driver
 Spring Data JPA (Java persistence API) also jakartha persistence
  
Create DB 
DemoCrudOperationApplicationSpring

Spring data JPA
- we will create class name same as database table name and variable name as database table columnname.

Entity class - the class which mapped to database table name.

JPA - java persistence api takes the data and map to table. 

ORM(object relational mapping) - object mapped to database table.

JPA implmentation
  - hibernate (Is ORM tool) 
  - exlipselink
  
  CRUD operation in springboot
  
  1. Create data base schema
       open mysql workbench and create db and table 
	   create database student_demo_ex;
	   use student_demo_ex;
	   create table student(id int primary key auto_increment,sname varchar(20),scourse varchar(25),sfee int(10));
	   select * from student;
	   
  2. Create Entity class (Entity or Model layer)
      
	  package com.demo.crudop.entities;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity  //automatically search in database and map this class to database table name
public class Student {
	
	//as per database id is primary key and auto_increment
	@Id  //helps us id is primary key
	@GeneratedValue(strategy = GenerationType.IDENTITY) //program will auto generate id(this is coding representation)
	private int id;
	private String sname;
	private String scourse;
	private int sfee;
	//generate getters and setters
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getSname() {
		return sname;
	}
	public void setSname(String sname) {
		this.sname = sname;
	}
	public String getScourse() {
		return scourse;
	}
	public void setScourse(String scourse) {
		this.scourse = scourse;
	}
	public int getSfee() {
		return sfee;
	}
	public void setSfee(int sfee) {
		this.sfee = sfee;
	}
	
	

}

3. database configuration
    configuration of project in application.properties file.
	- content stored as key and value pair
	- value never in ""
	
	#This is configuration file defined how interact with database

#connecting with the database
spring.datasource.url=jdbc:mysql://localhost:3306/student_demo_ex
spring.datasource.username=root
spring.datasource.password=Kiran@123


4. create repository - (JPA or CRUD repository)
   - without data can't deal with data.
   - repository layer help us to perform crud operation.
   - create interface and add CrudRepository
   
   package com.demo.crudop.repositories;

import org.springframework.data.repository.CrudRepository;

import com.demo.crudop.entities.Student;

//T - It will deal with which entity
//ID - which is primary key in table  and we need to give wrapper class name
//public interface StudentRepository extends CrudRepository<T, ID> {

public interface StudentRepository extends CrudRepository<Student, Integer> {

}

5.Test your code by unit testing.

package com.demo.crudop;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.demo.crudop.entities.Student;
import com.demo.crudop.repositories.StudentRepository;

@SpringBootTest
class DemoCrudOperationApplicationTests {
	//try to create object with @AutoWired annotation
	
	//StudentRepository is interface not a class
	@Autowired
	StudentRepository studentRepo;

	@Test
	void insertStudentRecords() {
		//JPA will take data of the object and push that to the table 
		//how to insert data into database using superhuman JPA repository
		//In spring avoid creating object in below ways
		Student student = new Student();
		//setid not required because it is auto incremented
		student.setSname("kirangond");
		student.setScourse("full stack");
		student.setSfee(10000);
		
		
		studentRepo.save(student);
		
		
	} 

}

 
 @Autowired - To create object of the class.
 
 using will inject data into db without sql queries know as NoSql
 studentRepo.save(student);  i.e object.save(object)
 
 Spring IOC(Inversion of control)
 
 Dependency Injection - technique where object are created at run time using annotation @Autowired.


Nov 4




